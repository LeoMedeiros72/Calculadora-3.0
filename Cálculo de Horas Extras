{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyO3MLHf1PJsozxrjqYoG5to",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/LeoMedeiros72/Meu-portifolio/blob/main/C%C3%A1lculo%20de%20Horas%20Extras\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 2,
      "metadata": {
        "id": "kaV6HNTzB90J"
      },
      "outputs": [],
      "source": [
        "banco_horas = '5h30'\n"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import re"
      ],
      "metadata": {
        "id": "g7VzF_PZE98g"
      },
      "execution_count": 3,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "match = re.match(r'(\\d+)h(\\d+)', banco_horas)\n",
        "if match:\n",
        "    horas = int(match.group(1))\n",
        "    minutos = int(match.group(2))\n",
        "else:\n",
        "    raise ValueError(\"Formato inv√°lido\")\n",
        "\n",
        "# Convertendo para minutos\n",
        "total_minutos = horas * 60 + minutos\n",
        "\n",
        "print(total_minutos)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "zrcO6v2rFKYn",
        "outputId": "45b3d101-3f42-4ae7-e7da-6fec01a73f68"
      },
      "execution_count": 4,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "330\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd"
      ],
      "metadata": {
        "id": "WzUk4wqfFctH"
      },
      "execution_count": 6,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "from google.colab import files\n",
        "uploaded = files.upload()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 73
        },
        "id": "YSkWUX9qFn2O",
        "outputId": "d9b4240d-1cff-4d5a-9930-42cff9ca71f1"
      },
      "execution_count": 10,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<IPython.core.display.HTML object>"
            ],
            "text/html": [
              "\n",
              "     <input type=\"file\" id=\"files-e0bbcad1-b745-45b8-a93e-3bdc94b233bd\" name=\"files[]\" multiple disabled\n",
              "        style=\"border:none\" />\n",
              "     <output id=\"result-e0bbcad1-b745-45b8-a93e-3bdc94b233bd\">\n",
              "      Upload widget is only available when the cell has been executed in the\n",
              "      current browser session. Please rerun this cell to enable.\n",
              "      </output>\n",
              "      <script>// Copyright 2017 Google LLC\n",
              "//\n",
              "// Licensed under the Apache License, Version 2.0 (the \"License\");\n",
              "// you may not use this file except in compliance with the License.\n",
              "// You may obtain a copy of the License at\n",
              "//\n",
              "//      http://www.apache.org/licenses/LICENSE-2.0\n",
              "//\n",
              "// Unless required by applicable law or agreed to in writing, software\n",
              "// distributed under the License is distributed on an \"AS IS\" BASIS,\n",
              "// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
              "// See the License for the specific language governing permissions and\n",
              "// limitations under the License.\n",
              "\n",
              "/**\n",
              " * @fileoverview Helpers for google.colab Python module.\n",
              " */\n",
              "(function(scope) {\n",
              "function span(text, styleAttributes = {}) {\n",
              "  const element = document.createElement('span');\n",
              "  element.textContent = text;\n",
              "  for (const key of Object.keys(styleAttributes)) {\n",
              "    element.style[key] = styleAttributes[key];\n",
              "  }\n",
              "  return element;\n",
              "}\n",
              "\n",
              "// Max number of bytes which will be uploaded at a time.\n",
              "const MAX_PAYLOAD_SIZE = 100 * 1024;\n",
              "\n",
              "function _uploadFiles(inputId, outputId) {\n",
              "  const steps = uploadFilesStep(inputId, outputId);\n",
              "  const outputElement = document.getElementById(outputId);\n",
              "  // Cache steps on the outputElement to make it available for the next call\n",
              "  // to uploadFilesContinue from Python.\n",
              "  outputElement.steps = steps;\n",
              "\n",
              "  return _uploadFilesContinue(outputId);\n",
              "}\n",
              "\n",
              "// This is roughly an async generator (not supported in the browser yet),\n",
              "// where there are multiple asynchronous steps and the Python side is going\n",
              "// to poll for completion of each step.\n",
              "// This uses a Promise to block the python side on completion of each step,\n",
              "// then passes the result of the previous step as the input to the next step.\n",
              "function _uploadFilesContinue(outputId) {\n",
              "  const outputElement = document.getElementById(outputId);\n",
              "  const steps = outputElement.steps;\n",
              "\n",
              "  const next = steps.next(outputElement.lastPromiseValue);\n",
              "  return Promise.resolve(next.value.promise).then((value) => {\n",
              "    // Cache the last promise value to make it available to the next\n",
              "    // step of the generator.\n",
              "    outputElement.lastPromiseValue = value;\n",
              "    return next.value.response;\n",
              "  });\n",
              "}\n",
              "\n",
              "/**\n",
              " * Generator function which is called between each async step of the upload\n",
              " * process.\n",
              " * @param {string} inputId Element ID of the input file picker element.\n",
              " * @param {string} outputId Element ID of the output display.\n",
              " * @return {!Iterable<!Object>} Iterable of next steps.\n",
              " */\n",
              "function* uploadFilesStep(inputId, outputId) {\n",
              "  const inputElement = document.getElementById(inputId);\n",
              "  inputElement.disabled = false;\n",
              "\n",
              "  const outputElement = document.getElementById(outputId);\n",
              "  outputElement.innerHTML = '';\n",
              "\n",
              "  const pickedPromise = new Promise((resolve) => {\n",
              "    inputElement.addEventListener('change', (e) => {\n",
              "      resolve(e.target.files);\n",
              "    });\n",
              "  });\n",
              "\n",
              "  const cancel = document.createElement('button');\n",
              "  inputElement.parentElement.appendChild(cancel);\n",
              "  cancel.textContent = 'Cancel upload';\n",
              "  const cancelPromise = new Promise((resolve) => {\n",
              "    cancel.onclick = () => {\n",
              "      resolve(null);\n",
              "    };\n",
              "  });\n",
              "\n",
              "  // Wait for the user to pick the files.\n",
              "  const files = yield {\n",
              "    promise: Promise.race([pickedPromise, cancelPromise]),\n",
              "    response: {\n",
              "      action: 'starting',\n",
              "    }\n",
              "  };\n",
              "\n",
              "  cancel.remove();\n",
              "\n",
              "  // Disable the input element since further picks are not allowed.\n",
              "  inputElement.disabled = true;\n",
              "\n",
              "  if (!files) {\n",
              "    return {\n",
              "      response: {\n",
              "        action: 'complete',\n",
              "      }\n",
              "    };\n",
              "  }\n",
              "\n",
              "  for (const file of files) {\n",
              "    const li = document.createElement('li');\n",
              "    li.append(span(file.name, {fontWeight: 'bold'}));\n",
              "    li.append(span(\n",
              "        `(${file.type || 'n/a'}) - ${file.size} bytes, ` +\n",
              "        `last modified: ${\n",
              "            file.lastModifiedDate ? file.lastModifiedDate.toLocaleDateString() :\n",
              "                                    'n/a'} - `));\n",
              "    const percent = span('0% done');\n",
              "    li.appendChild(percent);\n",
              "\n",
              "    outputElement.appendChild(li);\n",
              "\n",
              "    const fileDataPromise = new Promise((resolve) => {\n",
              "      const reader = new FileReader();\n",
              "      reader.onload = (e) => {\n",
              "        resolve(e.target.result);\n",
              "      };\n",
              "      reader.readAsArrayBuffer(file);\n",
              "    });\n",
              "    // Wait for the data to be ready.\n",
              "    let fileData = yield {\n",
              "      promise: fileDataPromise,\n",
              "      response: {\n",
              "        action: 'continue',\n",
              "      }\n",
              "    };\n",
              "\n",
              "    // Use a chunked sending to avoid message size limits. See b/62115660.\n",
              "    let position = 0;\n",
              "    do {\n",
              "      const length = Math.min(fileData.byteLength - position, MAX_PAYLOAD_SIZE);\n",
              "      const chunk = new Uint8Array(fileData, position, length);\n",
              "      position += length;\n",
              "\n",
              "      const base64 = btoa(String.fromCharCode.apply(null, chunk));\n",
              "      yield {\n",
              "        response: {\n",
              "          action: 'append',\n",
              "          file: file.name,\n",
              "          data: base64,\n",
              "        },\n",
              "      };\n",
              "\n",
              "      let percentDone = fileData.byteLength === 0 ?\n",
              "          100 :\n",
              "          Math.round((position / fileData.byteLength) * 100);\n",
              "      percent.textContent = `${percentDone}% done`;\n",
              "\n",
              "    } while (position < fileData.byteLength);\n",
              "  }\n",
              "\n",
              "  // All done.\n",
              "  yield {\n",
              "    response: {\n",
              "      action: 'complete',\n",
              "    }\n",
              "  };\n",
              "}\n",
              "\n",
              "scope.google = scope.google || {};\n",
              "scope.google.colab = scope.google.colab || {};\n",
              "scope.google.colab._files = {\n",
              "  _uploadFiles,\n",
              "  _uploadFilesContinue,\n",
              "};\n",
              "})(self);\n",
              "</script> "
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Saving Analise.csv to Analise.csv\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "print(uploaded)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "56M_0J3pF-rg",
        "outputId": "4b70b84d-e430-4e32-c421-1957ad0f8753"
      },
      "execution_count": 13,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "{'Analise.csv': b'\\xef\\xbb\\xbfDATA;janeiro-23;janeiro-23;fevereiro-23;fevereiro-23;mar\\xc3\\xa7o-23;mar\\xc3\\xa7o-23;abril-23;abril-23;maio-23;maio-23;junho-23;junho-23;julho-23;julho-23;agosto-23;agosto-23;setembro-23;setembro-23;outubro-23;outubro-23;novembro-23;novembro-23;dezembro-23;dezembro-23;janeiro-24;janeiro-24;fevereiro-24;fevereiro-24;mar\\xc3\\xa7o-24;mar\\xc3\\xa7o-24;abril-24;abril-24;maio-24;maio-24;junho-24;junho-24\\r\\nCOLABORADOR;CUSTO HORA EXTRA;BANCO DE HORAS RESTANTE;CUSTO HORA EXTRA2;BANCO DE HORAS RESTANTE3;CUSTO HORA EXTRA4;BANCO DE HORAS RESTANTE5;CUSTO HORA EXTRA6;BANCO DE HORAS RESTANTE7;CUSTO HORA EXTRA8;BANCO DE HORAS RESTANTE9;CUSTO HORA EXTRA10;BANCO DE HORAS RESTANTE11;CUSTO HORA EXTRA12;BANCO DE HORAS RESTANTE13;CUSTO HORA EXTRA14;BANCO DE HORAS RESTANTE15;CUSTO HORA EXTRA16;BANCO DE HORAS RESTANTE17;CUSTO HORA EXTRA18;BANCO DE HORAS RESTANTE19;CUSTO HORA EXTRA20;BANCO DE HORAS RESTANTE21;CUSTO HORA EXTRA22;BANCO DE HORAS RESTANTE23;CUSTO HORA EXTRA24;BANCO DE HORAS RESTANTE25;CUSTO HORA EXTRA26;BANCO DE HORAS RESTANTE27;CUSTO HORA EXTRA28;BANCO DE HORAS RESTANTE29;CUSTO HORA EXTRA30;BANCO DE HORAS RESTANTE31;CUSTO HORA EXTRA32;BANCO DE HORAS RESTANTE33;CUSTO HORA EXTRA34;BANCO DE HORAS RESTANTE35\\r\\nCoordenadora de Departamento Pessoal; R$ 1.100,51 ;5h15; R$ 31,59 ;3h44; R$ 770,24 ;-1h36;;; R$ -   ;0h13; R$ -   ;1h49; R$ -   ;4h38; R$ -   ;5h32; R$ 558,05 ;2h26; R$ -   ;8h47; R$ -   ;16h01; R$ 244,65 ;26H00; R$ 3.173,19 ;11h43; R$ 210,58 ;34h53; R$ 2.504,48 ;47h23;;; R$ -   ;12h5; R$ -   ;9h17\\r\\nAnalista de Remunera\\xc3\\xa7\\xc3\\xa3o e Benef\\xc3\\xadcios; R$ 2.200,15 ;4h04; R$ 9,39 ;15h32; R$ 306,40 ;19h09; R$ 268,32 ;22h17; R$ 2.522,68 ;0h37; R$ 75,34 ;-3h46; R$ 126,01 ;1h53; R$ 324,75 ;4h43; R$ 3.425,52 ;-3h13; R$ 2.805,87 ;-1h24; R$ 1.402,94 ;10h00; R$ 2.162,53 ;13h48; R$ 1.346,27 ;13h43; R$ 228,80 ;25h01; R$ 411,31 ;37h09;;; R$ -   ;2h39; R$ -   ;-3h1\\r\\nAnalista de Jornada; R$ 1.305,39 ;-1h23; R$ 5,83 ;5h55; R$ -   ;6h02; R$ -   ;16h39; R$ 1.193,02 ;3h38; R$ 25,81 ;2h24; R$ -   ;5h06; R$ -   ;0h5; R$ 56,12 ;4h38; R$ -   ;3h48; R$ -   ;10h54; R$ 43,53 ;16h58; R$ 1.205,36 ;9h26; R$ 26,23 ;12h5;;16h58;;; R$ -   ;7h41; R$ -   ;5h52\\r\\nAnalista de Rescis\\xc3\\xa3o; R$ 1.425,70 ;1h23; R$ 5,83 ;-0h17; R$ 23,18 ;0h33; R$ -   ;6h04; R$ 497,83 ;-0h25; R$ -   ;8h09; R$ 137,69 ;9h14; R$ -   ;5h49; R$ 462,07 ;1h48; R$ 141,67 ;2h08; R$ 332,31 ;10h46; R$ 2.016,52 ;12h16; R$ 1.470,06 ;5h01; R$ 193,46 ;10h53; R$ 1.621,46 ;9h59;;;;; R$ -   ;-1h57\\r\\nAnalista de Benef\\xc3\\xadcios; R$ 411,34 ;0h41; R$ 5,83 ;2h11; R$ 76,60 ;4h49; R$ -   ;5h47; R$ 420,68 ;1h13; R$ -   ;0h09; R$ -   ;-4h36; R$ -   ;0h06; R$ 7,64 ;-1h26; R$ -   ;0h35; R$ -   ;8h16; R$ 534,45 ;9h17; R$ 771,87 ;3h03; R$ 23,99 ;7h13; R$ 52,14 ;10h27; R$ 784,58 ;0h08; R$ 42,19 ;3h03; R$ -   ;-0h14\\r\\nAnalista de Admiss\\xc3\\xa3o; R$ 3.201,49 ;4h47; R$ 518,25 ;9h33; R$ 683,41 ;20h44; R$ 739,48 ;40h15; R$ 4.216,00 ;-2h12; R$ 1.705,15 ;14h39; R$ 1.258,51 ;18h02; R$ 410,24 ;20h22; R$ 2.045,81 ;2h47; R$ 918,88 ;10h17; R$ 304,63 ;28h25; R$ 4.379,26 ;43h53; R$ 4.976,69 ;16h06; R$ 967,80 ;26h24; R$ 634,85 ;34h54;;; R$ -   ;6h00; R$ -   ;8h05\\r\\nAnalista de F\\xc3\\xa9rias; R$ 5,59 ;1h47; R$ 5,83 ;0h48; R$ -   ;2h09; R$ -   ;5h37; R$ 140,57 ;4h1; R$ -   ;-4h43; R$ -   ;1h48; R$ 12,93 ;8h35; R$ 214,83 ;-4h59; R$ -   ;5h12; R$ -   ;9h33; R$ 27,81 ;7h38; R$ 253,89 ;0h51; R$ 23,99 ;-8h39; R$ 41,95 ;-2h23;;; R$ -   ;2h4; R$ -   ;-2h45\\r\\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\\r\\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\\r\\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\\r\\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\\r\\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\\r\\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\\r\\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\\r\\n'}\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Carregar o arquivo Excel\n",
        "uploaded = files.upload()  # Isso carrega o arquivo do seu computador para o Colab\n",
        "\n",
        "# Assumindo que voc√™ fez o upload de um arquivo Excel e o nomeou como 'nome_do_arquivo.xlsx'\n",
        "# Use o nome do arquivo correto que voc√™ fez upload\n",
        "nome_do_arquivo = 'Analise.csv'\n",
        "\n",
        "# Carregar o arquivo Excel como um DataFrame do Pandas\n",
        "df = pd.read_csv(nome_do_arquivo, delimiter=';')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 73
        },
        "id": "cVKJtrXVGeg0",
        "outputId": "4653fb10-80b7-4d90-c4b5-f3a49ffd6323"
      },
      "execution_count": 25,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<IPython.core.display.HTML object>"
            ],
            "text/html": [
              "\n",
              "     <input type=\"file\" id=\"files-48608a87-5c60-4b14-9d7d-adca03ee8f39\" name=\"files[]\" multiple disabled\n",
              "        style=\"border:none\" />\n",
              "     <output id=\"result-48608a87-5c60-4b14-9d7d-adca03ee8f39\">\n",
              "      Upload widget is only available when the cell has been executed in the\n",
              "      current browser session. Please rerun this cell to enable.\n",
              "      </output>\n",
              "      <script>// Copyright 2017 Google LLC\n",
              "//\n",
              "// Licensed under the Apache License, Version 2.0 (the \"License\");\n",
              "// you may not use this file except in compliance with the License.\n",
              "// You may obtain a copy of the License at\n",
              "//\n",
              "//      http://www.apache.org/licenses/LICENSE-2.0\n",
              "//\n",
              "// Unless required by applicable law or agreed to in writing, software\n",
              "// distributed under the License is distributed on an \"AS IS\" BASIS,\n",
              "// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
              "// See the License for the specific language governing permissions and\n",
              "// limitations under the License.\n",
              "\n",
              "/**\n",
              " * @fileoverview Helpers for google.colab Python module.\n",
              " */\n",
              "(function(scope) {\n",
              "function span(text, styleAttributes = {}) {\n",
              "  const element = document.createElement('span');\n",
              "  element.textContent = text;\n",
              "  for (const key of Object.keys(styleAttributes)) {\n",
              "    element.style[key] = styleAttributes[key];\n",
              "  }\n",
              "  return element;\n",
              "}\n",
              "\n",
              "// Max number of bytes which will be uploaded at a time.\n",
              "const MAX_PAYLOAD_SIZE = 100 * 1024;\n",
              "\n",
              "function _uploadFiles(inputId, outputId) {\n",
              "  const steps = uploadFilesStep(inputId, outputId);\n",
              "  const outputElement = document.getElementById(outputId);\n",
              "  // Cache steps on the outputElement to make it available for the next call\n",
              "  // to uploadFilesContinue from Python.\n",
              "  outputElement.steps = steps;\n",
              "\n",
              "  return _uploadFilesContinue(outputId);\n",
              "}\n",
              "\n",
              "// This is roughly an async generator (not supported in the browser yet),\n",
              "// where there are multiple asynchronous steps and the Python side is going\n",
              "// to poll for completion of each step.\n",
              "// This uses a Promise to block the python side on completion of each step,\n",
              "// then passes the result of the previous step as the input to the next step.\n",
              "function _uploadFilesContinue(outputId) {\n",
              "  const outputElement = document.getElementById(outputId);\n",
              "  const steps = outputElement.steps;\n",
              "\n",
              "  const next = steps.next(outputElement.lastPromiseValue);\n",
              "  return Promise.resolve(next.value.promise).then((value) => {\n",
              "    // Cache the last promise value to make it available to the next\n",
              "    // step of the generator.\n",
              "    outputElement.lastPromiseValue = value;\n",
              "    return next.value.response;\n",
              "  });\n",
              "}\n",
              "\n",
              "/**\n",
              " * Generator function which is called between each async step of the upload\n",
              " * process.\n",
              " * @param {string} inputId Element ID of the input file picker element.\n",
              " * @param {string} outputId Element ID of the output display.\n",
              " * @return {!Iterable<!Object>} Iterable of next steps.\n",
              " */\n",
              "function* uploadFilesStep(inputId, outputId) {\n",
              "  const inputElement = document.getElementById(inputId);\n",
              "  inputElement.disabled = false;\n",
              "\n",
              "  const outputElement = document.getElementById(outputId);\n",
              "  outputElement.innerHTML = '';\n",
              "\n",
              "  const pickedPromise = new Promise((resolve) => {\n",
              "    inputElement.addEventListener('change', (e) => {\n",
              "      resolve(e.target.files);\n",
              "    });\n",
              "  });\n",
              "\n",
              "  const cancel = document.createElement('button');\n",
              "  inputElement.parentElement.appendChild(cancel);\n",
              "  cancel.textContent = 'Cancel upload';\n",
              "  const cancelPromise = new Promise((resolve) => {\n",
              "    cancel.onclick = () => {\n",
              "      resolve(null);\n",
              "    };\n",
              "  });\n",
              "\n",
              "  // Wait for the user to pick the files.\n",
              "  const files = yield {\n",
              "    promise: Promise.race([pickedPromise, cancelPromise]),\n",
              "    response: {\n",
              "      action: 'starting',\n",
              "    }\n",
              "  };\n",
              "\n",
              "  cancel.remove();\n",
              "\n",
              "  // Disable the input element since further picks are not allowed.\n",
              "  inputElement.disabled = true;\n",
              "\n",
              "  if (!files) {\n",
              "    return {\n",
              "      response: {\n",
              "        action: 'complete',\n",
              "      }\n",
              "    };\n",
              "  }\n",
              "\n",
              "  for (const file of files) {\n",
              "    const li = document.createElement('li');\n",
              "    li.append(span(file.name, {fontWeight: 'bold'}));\n",
              "    li.append(span(\n",
              "        `(${file.type || 'n/a'}) - ${file.size} bytes, ` +\n",
              "        `last modified: ${\n",
              "            file.lastModifiedDate ? file.lastModifiedDate.toLocaleDateString() :\n",
              "                                    'n/a'} - `));\n",
              "    const percent = span('0% done');\n",
              "    li.appendChild(percent);\n",
              "\n",
              "    outputElement.appendChild(li);\n",
              "\n",
              "    const fileDataPromise = new Promise((resolve) => {\n",
              "      const reader = new FileReader();\n",
              "      reader.onload = (e) => {\n",
              "        resolve(e.target.result);\n",
              "      };\n",
              "      reader.readAsArrayBuffer(file);\n",
              "    });\n",
              "    // Wait for the data to be ready.\n",
              "    let fileData = yield {\n",
              "      promise: fileDataPromise,\n",
              "      response: {\n",
              "        action: 'continue',\n",
              "      }\n",
              "    };\n",
              "\n",
              "    // Use a chunked sending to avoid message size limits. See b/62115660.\n",
              "    let position = 0;\n",
              "    do {\n",
              "      const length = Math.min(fileData.byteLength - position, MAX_PAYLOAD_SIZE);\n",
              "      const chunk = new Uint8Array(fileData, position, length);\n",
              "      position += length;\n",
              "\n",
              "      const base64 = btoa(String.fromCharCode.apply(null, chunk));\n",
              "      yield {\n",
              "        response: {\n",
              "          action: 'append',\n",
              "          file: file.name,\n",
              "          data: base64,\n",
              "        },\n",
              "      };\n",
              "\n",
              "      let percentDone = fileData.byteLength === 0 ?\n",
              "          100 :\n",
              "          Math.round((position / fileData.byteLength) * 100);\n",
              "      percent.textContent = `${percentDone}% done`;\n",
              "\n",
              "    } while (position < fileData.byteLength);\n",
              "  }\n",
              "\n",
              "  // All done.\n",
              "  yield {\n",
              "    response: {\n",
              "      action: 'complete',\n",
              "    }\n",
              "  };\n",
              "}\n",
              "\n",
              "scope.google = scope.google || {};\n",
              "scope.google.colab = scope.google.colab || {};\n",
              "scope.google.colab._files = {\n",
              "  _uploadFiles,\n",
              "  _uploadFilesContinue,\n",
              "};\n",
              "})(self);\n",
              "</script> "
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Saving Analise.csv to Analise (4).csv\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "print(df.head())"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "f51dNeIGHbDG",
        "outputId": "c0423bf0-c1c5-4315-aac6-1b800e133cdd"
      },
      "execution_count": 26,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "                                   DATA        janeiro-23  \\\n",
            "0                           COLABORADOR  CUSTO HORA EXTRA   \n",
            "1  Coordenadora de Departamento Pessoal      R$ 1.100,51    \n",
            "2  Analista de Remunera√ß√£o e Benef√≠cios      R$ 2.200,15    \n",
            "3                   Analista de Jornada      R$ 1.305,39    \n",
            "4                  Analista de Rescis√£o      R$ 1.425,70    \n",
            "\n",
            "              janeiro-23.1       fevereiro-23            fevereiro-23.1  \\\n",
            "0  BANCO DE HORAS RESTANTE  CUSTO HORA EXTRA2  BANCO DE HORAS RESTANTE3   \n",
            "1                     5h15          R$ 31,59                       3h44   \n",
            "2                     4h04           R$ 9,39                      15h32   \n",
            "3                    -1h23           R$ 5,83                       5h55   \n",
            "4                     1h23           R$ 5,83                      -0h17   \n",
            "\n",
            "            mar√ßo-23                mar√ßo-23.1           abril-23  \\\n",
            "0  CUSTO HORA EXTRA4  BANCO DE HORAS RESTANTE5  CUSTO HORA EXTRA6   \n",
            "1         R$ 770,24                      -1h36                NaN   \n",
            "2         R$ 306,40                      19h09         R$ 268,32    \n",
            "3            R$ -                         6h02            R$ -      \n",
            "4          R$ 23,18                       0h33            R$ -      \n",
            "\n",
            "                 abril-23.1            maio-23  ...        fevereiro-24  \\\n",
            "0  BANCO DE HORAS RESTANTE7  CUSTO HORA EXTRA8  ...  CUSTO HORA EXTRA26   \n",
            "1                       NaN            R$ -     ...          R$ 210,58    \n",
            "2                     22h17       R$ 2.522,68   ...          R$ 228,80    \n",
            "3                     16h39       R$ 1.193,02   ...           R$ 26,23    \n",
            "4                      6h04         R$ 497,83   ...          R$ 193,46    \n",
            "\n",
            "              fevereiro-24.1            mar√ßo-24                 mar√ßo-24.1  \\\n",
            "0  BANCO DE HORAS RESTANTE27  CUSTO HORA EXTRA28  BANCO DE HORAS RESTANTE29   \n",
            "1                      34h53        R$ 2.504,48                       47h23   \n",
            "2                      25h01          R$ 411,31                       37h09   \n",
            "3                       12h5                 NaN                      16h58   \n",
            "4                      10h53        R$ 1.621,46                        9h59   \n",
            "\n",
            "             abril-24                 abril-24.1             maio-24  \\\n",
            "0  CUSTO HORA EXTRA30  BANCO DE HORAS RESTANTE31  CUSTO HORA EXTRA32   \n",
            "1                 NaN                        NaN             R$ -      \n",
            "2                 NaN                        NaN             R$ -      \n",
            "3                 NaN                        NaN             R$ -      \n",
            "4                 NaN                        NaN                 NaN   \n",
            "\n",
            "                   maio-24.1            junho-24                 junho-24.1  \n",
            "0  BANCO DE HORAS RESTANTE33  CUSTO HORA EXTRA34  BANCO DE HORAS RESTANTE35  \n",
            "1                       12h5             R$ -                          9h17  \n",
            "2                       2h39             R$ -                          -3h1  \n",
            "3                       7h41             R$ -                          5h52  \n",
            "4                        NaN             R$ -                         -1h57  \n",
            "\n",
            "[5 rows x 37 columns]\n"
          ]
        }
      ]
    }
  ]
}